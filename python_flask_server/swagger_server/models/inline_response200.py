# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, gene_symbol_id: int=None, gene_symbol: str=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param gene_symbol_id: The gene_symbol_id of this InlineResponse200.  # noqa: E501
        :type gene_symbol_id: int
        :param gene_symbol: The gene_symbol of this InlineResponse200.  # noqa: E501
        :type gene_symbol: str
        """
        self.swagger_types = {
            'gene_symbol_id': int,
            'gene_symbol': str
        }

        self.attribute_map = {
            'gene_symbol_id': 'gene_symbol_id',
            'gene_symbol': 'gene_symbol'
        }

        self._gene_symbol_id = gene_symbol_id
        self._gene_symbol = gene_symbol

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gene_symbol_id(self) -> int:
        """Gets the gene_symbol_id of this InlineResponse200.


        :return: The gene_symbol_id of this InlineResponse200.
        :rtype: int
        """
        return self._gene_symbol_id

    @gene_symbol_id.setter
    def gene_symbol_id(self, gene_symbol_id: int):
        """Sets the gene_symbol_id of this InlineResponse200.


        :param gene_symbol_id: The gene_symbol_id of this InlineResponse200.
        :type gene_symbol_id: int
        """
        if gene_symbol_id is None:
            raise ValueError("Invalid value for `gene_symbol_id`, must not be `None`")  # noqa: E501

        self._gene_symbol_id = gene_symbol_id

    @property
    def gene_symbol(self) -> str:
        """Gets the gene_symbol of this InlineResponse200.


        :return: The gene_symbol of this InlineResponse200.
        :rtype: str
        """
        return self._gene_symbol

    @gene_symbol.setter
    def gene_symbol(self, gene_symbol: str):
        """Sets the gene_symbol of this InlineResponse200.


        :param gene_symbol: The gene_symbol of this InlineResponse200.
        :type gene_symbol: str
        """
        if gene_symbol is None:
            raise ValueError("Invalid value for `gene_symbol`, must not be `None`")  # noqa: E501

        self._gene_symbol = gene_symbol
